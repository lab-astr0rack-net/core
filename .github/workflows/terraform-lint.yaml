name: "Terraform Plan"

on:
  pull_request:
    paths:
      - 'terraform/**'
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/lab-astr0rack-net/terraform:latest
      options: --cap-add=NET_ADMIN --cap-add=NET_RAW --dns=1.1.1.1 --dns=100.100.100.100
      volumes:
        - /var/lib:/var/lib
        - /dev/net/tun:/dev/net/tun
    defaults:
      run:
        working-directory: terraform
    permissions:
      contents: read
      issues: write
      pull-requests: write
    strategy:
      matrix:
        target: [vyos, keycloak]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: cd ${{ matrix.target }} && terraform fmt -check

      - name: Tailscale
        uses: tailscale/github-action@v1
        id: ts-login
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}

      - name: Terraform Init
        env:
          PG_CONN_STR: ${{ secrets.TF_POSTGRES_CRED }}
          PG_SCHEMA_NAME: ${{ matrix.target }}
        id: init
        run: cd ${{ matrix.target }} && terraform init
      
      - name: Terraform Validate
        id: validate
        run: cd ${{ matrix.target }} && terraform validate -no-color

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_pm_password:  ${{ secrets.TF_PROXMOX_PASSWORD }}
          TF_VAR_keycloak_password:  ${{ secrets.TF_KEYCLOAK_ADMIN_PASSWORD }}
          TF_VAR_keycloak_github_client_id:  ${{ secrets.TF_KEYCLOAK_GITHUB_CLIENT_ID }}
          TF_VAR_keycloak_github_client_secret:  ${{ secrets.TF_KEYCLOAK_GITHUB_CLIENT_SECRET }}
          PG_CONN_STR: ${{ secrets.TF_POSTGRES_CRED }}
          PG_SCHEMA_NAME: ${{ matrix.target }} 
        run: cd ${{ matrix.target }} && terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Logout of Tailscale
        id: ts-logout
        if: steps.ts-login.conclusion == 'success'
        run: sudo tailscale logout

